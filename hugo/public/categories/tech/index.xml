<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on 权掌天下 Blog</title>
    <link>https://like-ycy.github.io/categories/tech/</link>
    <description>Recent content in Tech on 权掌天下 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://like-ycy.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title> Nginx location匹配规则 </title>
      <link>https://like-ycy.github.io/2020/06/11/nginx-config-location/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/06/11/nginx-config-location/</guid>
      <description>一、location语法 location [=|~|~*|^~] uri { … } 其中，方括号中的四种标识符是可选项，用来改变请求字符串和uri的匹配方式。uri是待匹配的请求字符串，可</description>
    </item>
    
    <item>
      <title> Nginx配置location中的&#39;/&#39;号的作用 </title>
      <link>https://like-ycy.github.io/2020/05/26/nginx-config-location-proxypass/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/05/26/nginx-config-location-proxypass/</guid>
      <description>真实案例，就因为在配置时，少写了一个字符“/”，就造成访问不通报错，因而接到投诉。那么是怎么引起的呢？原因就是：Nginx在配置proxy_</description>
    </item>
    
    <item>
      <title> MySQL常见面试题（后续的面试题会更新） </title>
      <link>https://like-ycy.github.io/2020/05/25/mysql-examination-questions/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/05/25/mysql-examination-questions/</guid>
      <description>题目一 MyISAM和InnoDB的区别，什么时候选择MyISAM 参考回答 InnoDB是目前MySQL主流版本(5.6、5.7、8.0)默认的</description>
    </item>
    
    <item>
      <title> 面试 HTTP ，99% 的面试官都爱问这些问题 </title>
      <link>https://like-ycy.github.io/2020/05/19/http-interviews/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/05/19/http-interviews/</guid>
      <description>HTTP 和 HTTPS 的区别 HTTP 是一种 超文本传输协议(Hypertext Transfer Protocol)，HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、</description>
    </item>
    
    <item>
      <title> 详解 TCP 连接的“三次握手”与“四次挥手” </title>
      <link>https://like-ycy.github.io/2020/01/19/tcp-second-talk/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/19/tcp-second-talk/</guid>
      <description>TCP connection 客户端与服务器之间数据的发送和返回的过程当中需要创建一个叫TCP connection的东西； 由于TCP不存在连接的概念，只存在请求和响应</description>
    </item>
    
    <item>
      <title> 为什么 TCP 建立连接需要三次握手 </title>
      <link>https://like-ycy.github.io/2020/01/17/why-tcp-third-hand/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/17/why-tcp-third-hand/</guid>
      <description>为什么这么设计（Why&amp;rsquo;s THE Design）是一系列关于计算机领域中程序设计决策的文章，我们在这个系列的每一篇文章中都会提出一个具</description>
    </item>
    
    <item>
      <title> 听上去超酷的 Service Mesh 到底是什么？ </title>
      <link>https://like-ycy.github.io/2020/01/16/what-is-servicemesh/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/16/what-is-servicemesh/</guid>
      <description>Service Mesh 作为下一代微服务技术的代名词，初出茅庐却深得人心一鸣惊人，大有一统微服务时代的趋势。那么到底什么是Service Mesh？ 一言以蔽之：S</description>
    </item>
    
    <item>
      <title> 为什么执行自己的程序要在前面加./ </title>
      <link>https://like-ycy.github.io/2020/01/15/why-exec-program/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/15/why-exec-program/</guid>
      <description>在Linux中，我们执行内置命令时，直接输入命令名称即可，如： $ mv a b #将a重命名为b 而在执行自己写好的程序时，却要带上./，例如： $ hello hello: command</description>
    </item>
    
    <item>
      <title> 分布式和集群的区别 </title>
      <link>https://like-ycy.github.io/2020/01/14/distributed-and-cluster-difference/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/14/distributed-and-cluster-difference/</guid>
      <description>分布式开发的时代实际上早已悄悄地成为了时代的主流，吵得很热的云计算实际上只是包装在分布式之外的商业概念，很多开发者（包括我）都想加入研究云计</description>
    </item>
    
    <item>
      <title> 为什么微服务一定要有网关？ </title>
      <link>https://like-ycy.github.io/2020/01/13/why-microservice-gateway/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/13/why-microservice-gateway/</guid>
      <description>一、什么是服务网关 服务网关 = 路由转发 + 过滤器 1、路由转发：接收一切外界请求，转发到后端的微服务上去； 2、过滤器：在服务网关中可以完成一系列的</description>
    </item>
    
    <item>
      <title> 迄今为止把同步/异步/阻塞/非阻塞/BIO/NIO/AIO讲的这么清楚的好文章 </title>
      <link>https://like-ycy.github.io/2020/01/10/sync-async/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/10/sync-async/</guid>
      <description>常规的误区 假设有一个展示用户详情的需求，分两步，先调用一个HTTP接口拿到详情数据，然后使用适合的视图展示详情数据。 如果网速很慢，代码发起一</description>
    </item>
    
    <item>
      <title> 阿里云terway源码分析 </title>
      <link>https://like-ycy.github.io/2020/01/09/aliyun-terway/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/09/aliyun-terway/</guid>
      <description>背景 随着公司业务的发展，底层容器环境也需要在各个区域部署，实现多云架构， 使用各个云厂商提供的CNI插件是k8s多云环境下网络架构的一种高效的</description>
    </item>
    
    <item>
      <title> Nginx对网络事件的处理 </title>
      <link>https://like-ycy.github.io/2020/01/08/nginx-event-handling/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/08/nginx-event-handling/</guid>
      <description>网络传输 接下来看上面这张图，比如主机 A 就是一台家里的笔记本电脑，那么主机 B 就是一台服务器，上面跑着 Nginx 服务。从主机 A 发送一个 HTTP 的 GET 请求到主机 B</description>
    </item>
    
    <item>
      <title> sonarqube 搭配gitlab-ci </title>
      <link>https://like-ycy.github.io/2020/01/07/sonarqube-and-gitlab/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/07/sonarqube-and-gitlab/</guid>
      <description>1、项目文件中创建sonar-project.properties 文件 #项目的key sonar.projectKey=admin #sonarqube的主机地址 sonar.host.url=https://192.168.1.6:9000 #项目的名字（这个名字</description>
    </item>
    
    <item>
      <title> Docker安装sonarqube </title>
      <link>https://like-ycy.github.io/2020/01/06/sonarqube-install/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/06/sonarqube-install/</guid>
      <description>Sonarqube，是一种自动代码审查工具，可检测代码中的错误，漏洞和代码异常。它可以与您现有的工作流程集成，以实现跨项目分支和请求请求的连</description>
    </item>
    
    <item>
      <title> Gitlab-CI 流程 </title>
      <link>https://like-ycy.github.io/2020/01/03/gitlab-ci/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/03/gitlab-ci/</guid>
      <description>持续集成(Continuous Integration) 持续集成指的是频繁的将代码集成到主干，每次集成都通过自动化的构建（包括编译、发布、自动化测试）来验证，它的好</description>
    </item>
    
    <item>
      <title> 阿里云搭建shadowsocks-vpn </title>
      <link>https://like-ycy.github.io/2020/01/02/aliyun-vpn/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/02/aliyun-vpn/</guid>
      <description>阿里云服务器购买国外节点，建议香港、日本、新加坡 系统选择linux，脚本支持centos、debian、ubuntu 1、下载脚本文件，并执行</description>
    </item>
    
    <item>
      <title> mesos 以容器方式启动,拉取镜像失败问题 </title>
      <link>https://like-ycy.github.io/2020/01/01/mesos-pull-images-error/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2020/01/01/mesos-pull-images-error/</guid>
      <description>为了方便快速部署,将 mesos、marathon进行了容器化部署, 但是容器化完后发现在marathon 上创建应用一直创建不成功 分析过程 因为是</description>
    </item>
    
    <item>
      <title> TCP 超时与重传 </title>
      <link>https://like-ycy.github.io/2019/12/31/tcp-timeout-and-retransmission/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/31/tcp-timeout-and-retransmission/</guid>
      <description>我们都知道 TCP 协议具有重传机制，也就是说，如果发送方认为发生了丢包现象，就重发这些数据包。很显然，我们需要一个方法来「猜测」是否发生了丢包。最</description>
    </item>
    
    <item>
      <title> TCP 协议，握手挥手不是你想的那么简单 </title>
      <link>https://like-ycy.github.io/2019/12/30/tcp-handshake/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/30/tcp-handshake/</guid>
      <description>TCP 报文段结构 一谈到 TCP 协议，大家最先想到的词就是「面向连接」和「可靠」。没错，TCP 协议的设计就是为了能够在客户端和服务器之间建立起一个可靠连</description>
    </item>
    
    <item>
      <title> 浅谈 TCP 的三次握手和四次挥手 </title>
      <link>https://like-ycy.github.io/2019/12/27/talk-tcp/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/27/talk-tcp/</guid>
      <description>什么是OSI 七层模型? 开放式系统互联通信参考模型（英语：Open System Interconnection Reference Model，缩写为 OSI），简称为 OSI 模型（OSI model），一种概念</description>
    </item>
    
    <item>
      <title> Nginx 中 reload 流程 </title>
      <link>https://like-ycy.github.io/2019/12/26/nginx-reload/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/26/nginx-reload/</guid>
      <description>今天这篇文章主要来介绍下 Nginx 的 reload 流程。实际上在之前文章中，在更改了 nginx 配置文件时，我们都会执行 nginx -s reload 命令，我们执行这条命令的原因是希望 nginx 不停止服</description>
    </item>
    
    <item>
      <title> linux中inode包含什么内容？ </title>
      <link>https://like-ycy.github.io/2019/12/25/linux-inode/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/25/linux-inode/</guid>
      <description>1、inode是什么 理解inode，要从文件储存说起。 文件储存在硬盘上，硬盘的最小存储单位叫做&amp;rdquo;扇区&amp;rdquo;（Sector</description>
    </item>
    
    <item>
      <title> HTTPS 原理分析 </title>
      <link>https://like-ycy.github.io/2019/12/24/https-principle/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/24/https-principle/</guid>
      <description>随着 HTTPS 建站的成本下降，现在大部分的网站都已经开始用上 HTTPS 协议。大家都知道 HTTPS 比 HTTP 安全，也听说过与 HTTPS 协议相关的概念有 SSL 、非对称加密、 CA证书等，但</description>
    </item>
    
    <item>
      <title> 云原生云景高清大图 </title>
      <link>https://like-ycy.github.io/2019/12/23/cloudnativemap/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/23/cloudnativemap/</guid>
      <description>云原生地图 Cloud Native Trail Map ，是由CNCF发布的云原生云景大图，为企业拥抱云原生指明方向，地图涵盖：容器Registry，存储，容器运行时，网络，编排</description>
    </item>
    
    <item>
      <title> Nginx 原理和架构 </title>
      <link>https://like-ycy.github.io/2019/12/22/nginx-principle/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/22/nginx-principle/</guid>
      <description>1、Nginx 的整体架构 Nginx 里有一个 master 进程和多个 worker 进程。master 进程并不处理网络请求，主要负责调度工作进程：加载配置、启动工作进程及非停升</description>
    </item>
    
    <item>
      <title> 运维工程师必知必会的一些定律 </title>
      <link>https://like-ycy.github.io/2019/12/21/operation-law/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/21/operation-law/</guid>
      <description>墨菲定律 墨菲定律，指的是小概率事情，只要某件事情发生概率不为0，如果样本数足够多，那么这个事情最终会发生。 海恩法则 海恩法则，每一起严重事故的</description>
    </item>
    
    <item>
      <title> Linux find命令教程：15个find命令用法 </title>
      <link>https://like-ycy.github.io/2019/12/20/linux-find/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/20/linux-find/</guid>
      <description>查找目录 您可以使用-type d选项告诉find命令专门查找目录。这将使find命令仅搜索匹配的目录名，而不搜索文件名。 $ find /path/to/search -type d -name &amp;quot;name-of-dir&amp;quot; #查找隐</description>
    </item>
    
    <item>
      <title> Nginx的这些妙用，你肯定有不知道的 </title>
      <link>https://like-ycy.github.io/2019/12/19/nginx-usage/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/19/nginx-usage/</guid>
      <description>Nginx 简介 Nginx 是一个免费、开源、高性能、轻量级的 HTTP 和反向代理服务器，也是一个电子邮件（IMAP/POP3）代理服务器，其特点是占有内存少，并发能力</description>
    </item>
    
    <item>
      <title> AlertManager 组件安装 </title>
      <link>https://like-ycy.github.io/2019/12/18/prometheus6-alertmanager/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/18/prometheus6-alertmanager/</guid>
      <description>在 Prometheus 监控中， AlertManager 主要是用来除了告警信息和发送告警的。 yaml文件地址：https://github.com/ILIKETWICE/promet</description>
    </item>
    
    <item>
      <title> Grafana 可视化组件安装 </title>
      <link>https://like-ycy.github.io/2019/12/18/prometheus5-grafana/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/18/prometheus5-grafana/</guid>
      <description>Grafana 是一个开源的 dashboard，支持用 prometheus 作为数据源，部署起来也比较简单，这里我用的是 ConfigMap 做配置，所以看起来比较复杂。 yaml文件地址：htt</description>
    </item>
    
    <item>
      <title> kube-state-metrics 组件安装 </title>
      <link>https://like-ycy.github.io/2019/12/18/prometheus3-kube-state-metrics/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/18/prometheus3-kube-state-metrics/</guid>
      <description>在这里 kube-state-metrics 是作为 prometheus 的一个 exporter 来使用，主要用来提供集群中的 deployment、daemonset、cronjob 等服务的监控数据。 yaml文件地</description>
    </item>
    
    <item>
      <title> Node-Expoter 组件安装 </title>
      <link>https://like-ycy.github.io/2019/12/18/prometheus4-node-expoter/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/18/prometheus4-node-expoter/</guid>
      <description>node-exporter 这里主要用来提供集群节点本身的信息的，包括 CPU、内存、硬盘、IO 等等信息。 yaml文件地址：https://github.com/ILI</description>
    </item>
    
    <item>
      <title> Prometheus Server组件安装 </title>
      <link>https://like-ycy.github.io/2019/12/18/prometheus2-server/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/18/prometheus2-server/</guid>
      <description>这里 Prometheus Server 使用一个带 RBAC 权限的账号采集集群中现有监控信息（其实是从 cadvisor 获取）和节点信息。本次部署是基于比较新的 v2.11.1 版本，网上的一些教程还停留在比较早</description>
    </item>
    
    <item>
      <title> Prometheus 部署架构选择 </title>
      <link>https://like-ycy.github.io/2019/12/18/prometheus1-architecture/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/18/prometheus1-architecture/</guid>
      <description>本次 Prometheus 实践采用的是 Prometheus Sever + Kube-state-metrics + Grafana 的架构，每一个组件的作用如下: Promethues：提供强大的数据采集、数据存储、数据展示、告警等，天生完美支</description>
    </item>
    
    <item>
      <title> Prometheus架构原理及其组成 </title>
      <link>https://like-ycy.github.io/2019/12/17/prometheus-introduction/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/17/prometheus-introduction/</guid>
      <description>Prometheus 系统介绍 首先，Prometheus 受启发于 Google 的 Brogmon 监控系统，相似的 Kubernetes 是从 Google 的 Brog 系统演变而来，从 2012 年开始由前 Google 工程师在 Soundcloud 以开源软件的形式进行研</description>
    </item>
    
    <item>
      <title> GitLab 连接 K8S 集群 </title>
      <link>https://like-ycy.github.io/2019/12/16/gitlab-k8s/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/16/gitlab-k8s/</guid>
      <description>用 GitLab 连接 Kubernetes 需要明确以下几点内容： 目标集群的 API 连接地址； 集群的 CA 证书； 基于RBAC 的特定 ServiceAccount 的 Token； 需要部署 pod 到哪个 NameSpace； 获</description>
    </item>
    
    <item>
      <title> 阿里云子账号权限策略 </title>
      <link>https://like-ycy.github.io/2019/12/15/aliyun-policy/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/15/aliyun-policy/</guid>
      <description>1、OSS读写权限 { &amp;quot;Version&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;Statement&amp;quot;: [ { &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Action&amp;quot;: [ &amp;quot;oss:ListBuckets&amp;quot;, &amp;quot;oss:GetBucketStat&amp;quot;, &amp;quot;oss:GetBucketInfo&amp;quot;, &amp;quot;oss:GetBucketTagging&amp;quot;, &amp;quot;oss:GetBucketAcl&amp;quot; ], &amp;quot;Resource&amp;quot;: &amp;quot;acs:oss:*:*:*&amp;quot; }, { &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Action&amp;quot;: [ &amp;quot;oss:Get*&amp;quot;, &amp;quot;oss:List*&amp;quot; ], &amp;quot;Resource&amp;quot;: &amp;quot;acs:oss:*:*:oss名称&amp;quot; }, { &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,</description>
    </item>
    
    <item>
      <title> 执行力，才是拉开人与人差距的关键 </title>
      <link>https://like-ycy.github.io/2019/12/14/execution/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/14/execution/</guid>
      <description>01 如果你想变得更好 首先要学会执行 我们常常慨叹，为什么都是吃五谷杂粮长大的，人与人之间的差距怎么就那么大呢？ 为什么毕业于同一个学校的人，几年后</description>
    </item>
    
    <item>
      <title> 一行 Python 代码能实现这么多丧心病狂的功能？</title>
      <link>https://like-ycy.github.io/2019/12/13/one-line-of-python-code/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/13/one-line-of-python-code/</guid>
      <description>一行代码打印乘法口诀 print(&#39;\n&#39;.join([&#39; &#39;.join([&amp;quot;%2s x%2s = %2s&amp;quot;%(j,i,i*j) for j in range(1,i+1)]) for i in range(1,10)])) 一行代码打印迷宫 print(&#39;&#39;.join(__import__(&#39;random&#39;).choice(&#39;\u2571\u2572&#39;) for i in range(50*24))) 一行代码表白爱情 print(&#39;\n&#39;.join([&#39;&#39;.join([(&#39;Love&#39;[(x-y) % len(&#39;Love&#39;)] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 &amp;lt;= 0else&#39; &#39;) for x in range(-30, 30)]) for y in range(30, -30, -1)]))！ 一</description>
    </item>
    
    <item>
      <title>Nginx 配置参数中文说明 </title>
      <link>https://like-ycy.github.io/2019/12/12/nginx-chinese/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/12/nginx-chinese/</guid>
      <description>Nginx 配置参数中文详细说明： #定义Nginx运行的用户和用户组 user www www; # #nginx进程数,建议设置为等于CPU总核心数. worker_processes 8; # #全局错误日志定义</description>
    </item>
    
    <item>
      <title>【Kubernetes系列】第9篇 网络原理解析</title>
      <link>https://like-ycy.github.io/2019/12/11/kubernetes9-network/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/11/kubernetes9-network/</guid>
      <description>1、Linux网络基础 Network Namespace(网络命名空间)： Linux在网络栈中引入网络命名空间，将独立的网络协议栈隔离到不同的命令空间中，</description>
    </item>
    
    <item>
      <title>【Kubernetes系列】第8篇 CI/CD 之全流程实践</title>
      <link>https://like-ycy.github.io/2019/12/10/kubernetes8-cicd-full/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/10/kubernetes8-cicd-full/</guid>
      <description>前言 1）本实践中已经的示例代码及jenkins-agent镜像已经推送归档至github，&amp;ndash;&amp;gt;传送门（https://gi</description>
    </item>
    
    <item>
      <title>【Kubernetes系列】第7篇 CI/CD 之组件部署</title>
      <link>https://like-ycy.github.io/2019/12/09/kubernetes7-cicd/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/09/kubernetes7-cicd/</guid>
      <description>1、前言 应对敏捷开发的需求，对CI(持续集成))/CD（持续交付）的提出了更高的标准，今天来讨论下，如何基于开源组件（gitlab/jenk</description>
    </item>
    
    <item>
      <title>【Kubernetes系列】第6篇 Ingress controller - nginx组件介绍</title>
      <link>https://like-ycy.github.io/2019/12/08/kubernetes6-nginx-introduction/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/08/kubernetes6-nginx-introduction/</guid>
      <description>1、概述 在上一篇文章中我们介绍了如何通过helm进行安装部署traefik组件（链接点这里），文中还提到常用的ingress controll</description>
    </item>
    
    <item>
      <title>【Kubernetes系列】第5篇 Ingress Controller - Traefik组件介绍</title>
      <link>https://like-ycy.github.io/2019/12/07/kubernetes5-traefik-introduction/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/07/kubernetes5-traefik-introduction/</guid>
      <description>1、概述 为了能够让Ingress资源能够工作，在Kubernetes集群中必须至少有一个运行中的ingress controller组件。也就</description>
    </item>
    
    <item>
      <title>【Kubernetes系列】第4篇 Kubernetes包管理工具-helm介绍</title>
      <link>https://like-ycy.github.io/2019/12/06/kubernetes4-helm-introduction/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/06/kubernetes4-helm-introduction/</guid>
      <description>1、概述 Helm是kubernetes包管理工具，可以方便快捷的安装、管理、卸载kubernetes应用，类似于Linux操作系统中yum或</description>
    </item>
    
    <item>
      <title>【Kubernetes系列】第3篇 Kubernetes集群安装部署</title>
      <link>https://like-ycy.github.io/2019/12/05/kubernetes3-cluster-install/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/05/kubernetes3-cluster-install/</guid>
      <description>本文介绍了如何通过Kubespray来进行部署高可用k8s集群，k8s版本为1.12.5。 1、部署手册 代码仓库：https://github</description>
    </item>
    
    <item>
      <title>【Kubernetes系列】第2篇 基础概念介绍 </title>
      <link>https://like-ycy.github.io/2019/12/04/kubernetes2-introduction-to-basic-concepts/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/12/04/kubernetes2-introduction-to-basic-concepts/</guid>
      <description>1、Pod - 实例 Pod是一组紧密关联的容器集合，支持多个容器在一个Pod中共享网络和文件系统，可以通过进程间通信和文件共享这种简单高效的方式</description>
    </item>
    
    <item>
      <title>【Kubernetes系列】第1篇 架构及组件介绍 </title>
      <link>https://like-ycy.github.io/2019/11/29/kubernetes1-architecture-component/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://like-ycy.github.io/2019/11/29/kubernetes1-architecture-component/</guid>
      <description>1、Kubernetes简介 Kubernetes是谷歌开源的容器集群管理系统，是Google多年大规模容器管理技术Borg的开源版本，主要功</description>
    </item>
    
  </channel>
</rss>